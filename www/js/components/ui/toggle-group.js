define(["require", "exports", "react/jsx-runtime", "react", "@radix-ui/react-toggle-group", "@/lib/utils", "@/components/ui/toggle"], function (require, exports, jsx_runtime_1, React, ToggleGroupPrimitive, utils_1, toggle_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ToggleGroup = ToggleGroup;
    exports.ToggleGroupItem = ToggleGroupItem;
    const ToggleGroupContext = React.createContext({
        size: "default",
        variant: "default",
    });
    function ToggleGroup({ className, variant, size, children, ...props }) {
        return ((0, jsx_runtime_1.jsx)(ToggleGroupPrimitive.Root, { "data-slot": "toggle-group", "data-variant": variant, "data-size": size, className: (0, utils_1.cn)("group/toggle-group flex items-center justify-center rounded-md data-[variant=outline]:shadow-xs", className), ...props, children: (0, jsx_runtime_1.jsx)(ToggleGroupContext.Provider, { value: { variant, size }, children: children }) }));
    }
    function ToggleGroupItem({ className, children, variant, size, ...props }) {
        const context = React.useContext(ToggleGroupContext);
        return ((0, jsx_runtime_1.jsx)(ToggleGroupPrimitive.Item, { "data-slot": "toggle-group-item", "data-variant": context.variant || variant, "data-size": context.size || size, className: (0, utils_1.cn)((0, toggle_1.toggleVariants)({
                variant: context.variant || variant,
                size: context.size || size,
            }), "min-w-0 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l", className), ...props, children: children }));
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLWdyb3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdWkvdG9nZ2xlLWdyb3VwLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0lBQUEsWUFBWSxDQUFDOzs7SUF3RUosa0NBQVc7SUFBRSwwQ0FBZTtJQS9EckMsTUFBTSxrQkFBa0IsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUU1QztRQUNBLElBQUksRUFBRSxTQUFTO1FBQ2YsT0FBTyxFQUFFLFNBQVM7S0FDbkIsQ0FBQyxDQUFDO0lBRUgsU0FBUyxXQUFXLENBQUMsRUFDbkIsU0FBUyxFQUNULE9BQU8sRUFDUCxJQUFJLEVBQ0osUUFBUSxFQUNSLEdBQUcsS0FBSyxFQUUyQjtRQUNuQyxPQUFPLENBQ0wsdUJBQUMsb0JBQW9CLENBQUMsSUFBSSxpQkFDZCxjQUFjLGtCQUNWLE9BQU8sZUFDVixJQUFJLEVBQ2YsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUNYLGlHQUFpRyxFQUNqRyxTQUFTLENBQ1YsS0FDRyxLQUFLLFlBRVQsdUJBQUMsa0JBQWtCLENBQUMsUUFBUSxJQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsWUFDbEQsUUFBUSxHQUNtQixHQUNKLENBQzdCLENBQUM7SUFDSixDQUFDO0lBRUQsU0FBUyxlQUFlLENBQUMsRUFDdkIsU0FBUyxFQUNULFFBQVEsRUFDUixPQUFPLEVBQ1AsSUFBSSxFQUNKLEdBQUcsS0FBSyxFQUUyQjtRQUNuQyxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFckQsT0FBTyxDQUNMLHVCQUFDLG9CQUFvQixDQUFDLElBQUksaUJBQ2QsbUJBQW1CLGtCQUNmLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxlQUM3QixPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksRUFDL0IsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUNYLElBQUEsdUJBQWMsRUFBQztnQkFDYixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sSUFBSSxPQUFPO2dCQUNuQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJO2FBQzNCLENBQUMsRUFDRixzTEFBc0wsRUFDdEwsU0FBUyxDQUNWLEtBQ0csS0FBSyxZQUVSLFFBQVEsR0FDaUIsQ0FDN0IsQ0FBQztJQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBUb2dnbGVHcm91cFByaW1pdGl2ZSBmcm9tIFwiQHJhZGl4LXVpL3JlYWN0LXRvZ2dsZS1ncm91cFwiO1xuaW1wb3J0IHsgdHlwZSBWYXJpYW50UHJvcHMgfSBmcm9tIFwiY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5XCI7XG5cbmltcG9ydCB7IGNuIH0gZnJvbSBcIkAvbGliL3V0aWxzXCI7XG5pbXBvcnQgeyB0b2dnbGVWYXJpYW50cyB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvdG9nZ2xlXCI7XG5cbmNvbnN0IFRvZ2dsZUdyb3VwQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8XG4gIFZhcmlhbnRQcm9wczx0eXBlb2YgdG9nZ2xlVmFyaWFudHM+XG4+KHtcbiAgc2l6ZTogXCJkZWZhdWx0XCIsXG4gIHZhcmlhbnQ6IFwiZGVmYXVsdFwiLFxufSk7XG5cbmZ1bmN0aW9uIFRvZ2dsZUdyb3VwKHtcbiAgY2xhc3NOYW1lLFxuICB2YXJpYW50LFxuICBzaXplLFxuICBjaGlsZHJlbixcbiAgLi4ucHJvcHNcbn06IFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBUb2dnbGVHcm91cFByaW1pdGl2ZS5Sb290PiAmXG4gIFZhcmlhbnRQcm9wczx0eXBlb2YgdG9nZ2xlVmFyaWFudHM+KSB7XG4gIHJldHVybiAoXG4gICAgPFRvZ2dsZUdyb3VwUHJpbWl0aXZlLlJvb3RcbiAgICAgIGRhdGEtc2xvdD1cInRvZ2dsZS1ncm91cFwiXG4gICAgICBkYXRhLXZhcmlhbnQ9e3ZhcmlhbnR9XG4gICAgICBkYXRhLXNpemU9e3NpemV9XG4gICAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgICBcImdyb3VwL3RvZ2dsZS1ncm91cCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciByb3VuZGVkLW1kIGRhdGEtW3ZhcmlhbnQ9b3V0bGluZV06c2hhZG93LXhzXCIsXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICl9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgPlxuICAgICAgPFRvZ2dsZUdyb3VwQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyB2YXJpYW50LCBzaXplIH19PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1RvZ2dsZUdyb3VwQ29udGV4dC5Qcm92aWRlcj5cbiAgICA8L1RvZ2dsZUdyb3VwUHJpbWl0aXZlLlJvb3Q+XG4gICk7XG59XG5cbmZ1bmN0aW9uIFRvZ2dsZUdyb3VwSXRlbSh7XG4gIGNsYXNzTmFtZSxcbiAgY2hpbGRyZW4sXG4gIHZhcmlhbnQsXG4gIHNpemUsXG4gIC4uLnByb3BzXG59OiBSZWFjdC5Db21wb25lbnRQcm9wczx0eXBlb2YgVG9nZ2xlR3JvdXBQcmltaXRpdmUuSXRlbT4gJlxuICBWYXJpYW50UHJvcHM8dHlwZW9mIHRvZ2dsZVZhcmlhbnRzPikge1xuICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChUb2dnbGVHcm91cENvbnRleHQpO1xuXG4gIHJldHVybiAoXG4gICAgPFRvZ2dsZUdyb3VwUHJpbWl0aXZlLkl0ZW1cbiAgICAgIGRhdGEtc2xvdD1cInRvZ2dsZS1ncm91cC1pdGVtXCJcbiAgICAgIGRhdGEtdmFyaWFudD17Y29udGV4dC52YXJpYW50IHx8IHZhcmlhbnR9XG4gICAgICBkYXRhLXNpemU9e2NvbnRleHQuc2l6ZSB8fCBzaXplfVxuICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgdG9nZ2xlVmFyaWFudHMoe1xuICAgICAgICAgIHZhcmlhbnQ6IGNvbnRleHQudmFyaWFudCB8fCB2YXJpYW50LFxuICAgICAgICAgIHNpemU6IGNvbnRleHQuc2l6ZSB8fCBzaXplLFxuICAgICAgICB9KSxcbiAgICAgICAgXCJtaW4tdy0wIHNocmluay0wIHJvdW5kZWQtbm9uZSBzaGFkb3ctbm9uZSBmaXJzdDpyb3VuZGVkLWwtbWQgbGFzdDpyb3VuZGVkLXItbWQgZm9jdXM6ei0xMCBmb2N1cy12aXNpYmxlOnotMTAgZGF0YS1bdmFyaWFudD1vdXRsaW5lXTpib3JkZXItbC0wIGRhdGEtW3ZhcmlhbnQ9b3V0bGluZV06Zmlyc3Q6Ym9yZGVyLWxcIixcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgKX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9Ub2dnbGVHcm91cFByaW1pdGl2ZS5JdGVtPlxuICApO1xufVxuXG5leHBvcnQgeyBUb2dnbGVHcm91cCwgVG9nZ2xlR3JvdXBJdGVtIH07XG4iXX0=