define(["require", "exports", "react/jsx-runtime", "cmdk", "lucide-react", "@/lib/utils", "@/components/ui/dialog"], function (require, exports, jsx_runtime_1, cmdk_1, lucide_react_1, utils_1, dialog_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Command = Command;
    exports.CommandDialog = CommandDialog;
    exports.CommandInput = CommandInput;
    exports.CommandList = CommandList;
    exports.CommandEmpty = CommandEmpty;
    exports.CommandGroup = CommandGroup;
    exports.CommandItem = CommandItem;
    exports.CommandShortcut = CommandShortcut;
    exports.CommandSeparator = CommandSeparator;
    function Command({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)(cmdk_1.Command, { "data-slot": "command", className: (0, utils_1.cn)("bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md", className), ...props }));
    }
    function CommandDialog({ title = "Command Palette", description = "Search for a command to run...", children, ...props }) {
        return ((0, jsx_runtime_1.jsxs)(dialog_1.Dialog, { ...props, children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { className: "sr-only", children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: title }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: description })] }), (0, jsx_runtime_1.jsx)(dialog_1.DialogContent, { className: "overflow-hidden p-0", children: (0, jsx_runtime_1.jsx)(Command, { className: "[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5", children: children }) })] }));
    }
    function CommandInput({ className, ...props }) {
        return ((0, jsx_runtime_1.jsxs)("div", { "data-slot": "command-input-wrapper", className: "flex h-9 items-center gap-2 border-b px-3", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.SearchIcon, { className: "size-4 shrink-0 opacity-50" }), (0, jsx_runtime_1.jsx)(cmdk_1.Command.Input, { "data-slot": "command-input", className: (0, utils_1.cn)("placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50", className), ...props })] }));
    }
    function CommandList({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)(cmdk_1.Command.List, { "data-slot": "command-list", className: (0, utils_1.cn)("max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto", className), ...props }));
    }
    function CommandEmpty({ ...props }) {
        return ((0, jsx_runtime_1.jsx)(cmdk_1.Command.Empty, { "data-slot": "command-empty", className: "py-6 text-center text-sm", ...props }));
    }
    function CommandGroup({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)(cmdk_1.Command.Group, { "data-slot": "command-group", className: (0, utils_1.cn)("text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium", className), ...props }));
    }
    function CommandSeparator({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)(cmdk_1.Command.Separator, { "data-slot": "command-separator", className: (0, utils_1.cn)("bg-border -mx-1 h-px", className), ...props }));
    }
    function CommandItem({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)(cmdk_1.Command.Item, { "data-slot": "command-item", className: (0, utils_1.cn)("data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4", className), ...props }));
    }
    function CommandShortcut({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)("span", { "data-slot": "command-shortcut", className: (0, utils_1.cn)("text-muted-foreground ml-auto text-xs tracking-widest", className), ...props }));
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL2NvbW1hbmQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7SUFBQSxZQUFZLENBQUM7OztJQXVLWCwwQkFBTztJQUNQLHNDQUFhO0lBQ2Isb0NBQVk7SUFDWixrQ0FBVztJQUNYLG9DQUFZO0lBQ1osb0NBQVk7SUFDWixrQ0FBVztJQUNYLDBDQUFlO0lBQ2YsNENBQWdCO0lBaEtsQixTQUFTLE9BQU8sQ0FBQyxFQUNmLFNBQVMsRUFDVCxHQUFHLEtBQUssRUFDc0M7UUFDOUMsT0FBTyxDQUNMLHVCQUFDLGNBQWdCLGlCQUNMLFNBQVMsRUFDbkIsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUNYLDJGQUEyRixFQUMzRixTQUFTLENBQ1YsS0FDRyxLQUFLLEdBQ1QsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELFNBQVMsYUFBYSxDQUFDLEVBQ3JCLEtBQUssR0FBRyxpQkFBaUIsRUFDekIsV0FBVyxHQUFHLGdDQUFnQyxFQUM5QyxRQUFRLEVBQ1IsR0FBRyxLQUFLLEVBSVQ7UUFDQyxPQUFPLENBQ0wsd0JBQUMsZUFBTSxPQUFLLEtBQUssYUFDZix3QkFBQyxxQkFBWSxJQUFDLFNBQVMsRUFBQyxTQUFTLGFBQy9CLHVCQUFDLG9CQUFXLGNBQUUsS0FBSyxHQUFlLEVBQ2xDLHVCQUFDLDBCQUFpQixjQUFFLFdBQVcsR0FBcUIsSUFDdkMsRUFDZix1QkFBQyxzQkFBYSxJQUFDLFNBQVMsRUFBQyxxQkFBcUIsWUFDNUMsdUJBQUMsT0FBTyxJQUFDLFNBQVMsRUFBQyx1WkFBdVosWUFDdmEsUUFBUSxHQUNELEdBQ0ksSUFDVCxDQUNWLENBQUM7SUFDSixDQUFDO0lBRUQsU0FBUyxZQUFZLENBQUMsRUFDcEIsU0FBUyxFQUNULEdBQUcsS0FBSyxFQUM0QztRQUNwRCxPQUFPLENBQ0wsOENBQ1ksdUJBQXVCLEVBQ2pDLFNBQVMsRUFBQywyQ0FBMkMsYUFFckQsdUJBQUMseUJBQVUsSUFBQyxTQUFTLEVBQUMsNEJBQTRCLEdBQUcsRUFDckQsdUJBQUMsY0FBZ0IsQ0FBQyxLQUFLLGlCQUNYLGVBQWUsRUFDekIsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUNYLDBKQUEwSixFQUMxSixTQUFTLENBQ1YsS0FDRyxLQUFLLEdBQ1QsSUFDRSxDQUNQLENBQUM7SUFDSixDQUFDO0lBRUQsU0FBUyxXQUFXLENBQUMsRUFDbkIsU0FBUyxFQUNULEdBQUcsS0FBSyxFQUMyQztRQUNuRCxPQUFPLENBQ0wsdUJBQUMsY0FBZ0IsQ0FBQyxJQUFJLGlCQUNWLGNBQWMsRUFDeEIsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUNYLDZEQUE2RCxFQUM3RCxTQUFTLENBQ1YsS0FDRyxLQUFLLEdBQ1QsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELFNBQVMsWUFBWSxDQUFDLEVBQ3BCLEdBQUcsS0FBSyxFQUM0QztRQUNwRCxPQUFPLENBQ0wsdUJBQUMsY0FBZ0IsQ0FBQyxLQUFLLGlCQUNYLGVBQWUsRUFDekIsU0FBUyxFQUFDLDBCQUEwQixLQUNoQyxLQUFLLEdBQ1QsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELFNBQVMsWUFBWSxDQUFDLEVBQ3BCLFNBQVMsRUFDVCxHQUFHLEtBQUssRUFDNEM7UUFDcEQsT0FBTyxDQUNMLHVCQUFDLGNBQWdCLENBQUMsS0FBSyxpQkFDWCxlQUFlLEVBQ3pCLFNBQVMsRUFBRSxJQUFBLFVBQUUsRUFDWCx3TkFBd04sRUFDeE4sU0FBUyxDQUNWLEtBQ0csS0FBSyxHQUNULENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCxTQUFTLGdCQUFnQixDQUFDLEVBQ3hCLFNBQVMsRUFDVCxHQUFHLEtBQUssRUFDZ0Q7UUFDeEQsT0FBTyxDQUNMLHVCQUFDLGNBQWdCLENBQUMsU0FBUyxpQkFDZixtQkFBbUIsRUFDN0IsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUFDLHNCQUFzQixFQUFFLFNBQVMsQ0FBQyxLQUM1QyxLQUFLLEdBQ1QsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELFNBQVMsV0FBVyxDQUFDLEVBQ25CLFNBQVMsRUFDVCxHQUFHLEtBQUssRUFDMkM7UUFDbkQsT0FBTyxDQUNMLHVCQUFDLGNBQWdCLENBQUMsSUFBSSxpQkFDVixjQUFjLEVBQ3hCLFNBQVMsRUFBRSxJQUFBLFVBQUUsRUFDWCxxWUFBcVksRUFDclksU0FBUyxDQUNWLEtBQ0csS0FBSyxHQUNULENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCxTQUFTLGVBQWUsQ0FBQyxFQUN2QixTQUFTLEVBQ1QsR0FBRyxLQUFLLEVBQ3FCO1FBQzdCLE9BQU8sQ0FDTCw4Q0FDWSxrQkFBa0IsRUFDNUIsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUNYLHVEQUF1RCxFQUN2RCxTQUFTLENBQ1YsS0FDRyxLQUFLLEdBQ1QsQ0FDSCxDQUFDO0lBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IENvbW1hbmQgYXMgQ29tbWFuZFByaW1pdGl2ZSB9IGZyb20gXCJjbWRrXCI7XG5pbXBvcnQgeyBTZWFyY2hJY29uIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiO1xuXG5pbXBvcnQgeyBjbiB9IGZyb20gXCJAL2xpYi91dGlsc1wiO1xuaW1wb3J0IHtcbiAgRGlhbG9nLFxuICBEaWFsb2dDb250ZW50LFxuICBEaWFsb2dEZXNjcmlwdGlvbixcbiAgRGlhbG9nSGVhZGVyLFxuICBEaWFsb2dUaXRsZSxcbn0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9kaWFsb2dcIjtcblxuZnVuY3Rpb24gQ29tbWFuZCh7XG4gIGNsYXNzTmFtZSxcbiAgLi4ucHJvcHNcbn06IFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBDb21tYW5kUHJpbWl0aXZlPikge1xuICByZXR1cm4gKFxuICAgIDxDb21tYW5kUHJpbWl0aXZlXG4gICAgICBkYXRhLXNsb3Q9XCJjb21tYW5kXCJcbiAgICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICAgIFwiYmctcG9wb3ZlciB0ZXh0LXBvcG92ZXItZm9yZWdyb3VuZCBmbGV4IGgtZnVsbCB3LWZ1bGwgZmxleC1jb2wgb3ZlcmZsb3ctaGlkZGVuIHJvdW5kZWQtbWRcIixcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgKX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICAvPlxuICApO1xufVxuXG5mdW5jdGlvbiBDb21tYW5kRGlhbG9nKHtcbiAgdGl0bGUgPSBcIkNvbW1hbmQgUGFsZXR0ZVwiLFxuICBkZXNjcmlwdGlvbiA9IFwiU2VhcmNoIGZvciBhIGNvbW1hbmQgdG8gcnVuLi4uXCIsXG4gIGNoaWxkcmVuLFxuICAuLi5wcm9wc1xufTogUmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIERpYWxvZz4gJiB7XG4gIHRpdGxlPzogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbn0pIHtcbiAgcmV0dXJuIChcbiAgICA8RGlhbG9nIHsuLi5wcm9wc30+XG4gICAgICA8RGlhbG9nSGVhZGVyIGNsYXNzTmFtZT1cInNyLW9ubHlcIj5cbiAgICAgICAgPERpYWxvZ1RpdGxlPnt0aXRsZX08L0RpYWxvZ1RpdGxlPlxuICAgICAgICA8RGlhbG9nRGVzY3JpcHRpb24+e2Rlc2NyaXB0aW9ufTwvRGlhbG9nRGVzY3JpcHRpb24+XG4gICAgICA8L0RpYWxvZ0hlYWRlcj5cbiAgICAgIDxEaWFsb2dDb250ZW50IGNsYXNzTmFtZT1cIm92ZXJmbG93LWhpZGRlbiBwLTBcIj5cbiAgICAgICAgPENvbW1hbmQgY2xhc3NOYW1lPVwiWyZfW2NtZGstZ3JvdXAtaGVhZGluZ11dOnRleHQtbXV0ZWQtZm9yZWdyb3VuZCAqKjpkYXRhLVtzbG90PWNvbW1hbmQtaW5wdXQtd3JhcHBlcl06aC0xMiBbJl9bY21kay1ncm91cC1oZWFkaW5nXV06cHgtMiBbJl9bY21kay1ncm91cC1oZWFkaW5nXV06Zm9udC1tZWRpdW0gWyZfW2NtZGstZ3JvdXBdXTpweC0yIFsmX1tjbWRrLWdyb3VwXTpub3QoW2hpZGRlbl0pX35bY21kay1ncm91cF1dOnB0LTAgWyZfW2NtZGstaW5wdXQtd3JhcHBlcl1fc3ZnXTpoLTUgWyZfW2NtZGstaW5wdXQtd3JhcHBlcl1fc3ZnXTp3LTUgWyZfW2NtZGstaW5wdXRdXTpoLTEyIFsmX1tjbWRrLWl0ZW1dXTpweC0yIFsmX1tjbWRrLWl0ZW1dXTpweS0zIFsmX1tjbWRrLWl0ZW1dX3N2Z106aC01IFsmX1tjbWRrLWl0ZW1dX3N2Z106dy01XCI+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L0NvbW1hbmQ+XG4gICAgICA8L0RpYWxvZ0NvbnRlbnQ+XG4gICAgPC9EaWFsb2c+XG4gICk7XG59XG5cbmZ1bmN0aW9uIENvbW1hbmRJbnB1dCh7XG4gIGNsYXNzTmFtZSxcbiAgLi4ucHJvcHNcbn06IFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBDb21tYW5kUHJpbWl0aXZlLklucHV0Pikge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGRhdGEtc2xvdD1cImNvbW1hbmQtaW5wdXQtd3JhcHBlclwiXG4gICAgICBjbGFzc05hbWU9XCJmbGV4IGgtOSBpdGVtcy1jZW50ZXIgZ2FwLTIgYm9yZGVyLWIgcHgtM1wiXG4gICAgPlxuICAgICAgPFNlYXJjaEljb24gY2xhc3NOYW1lPVwic2l6ZS00IHNocmluay0wIG9wYWNpdHktNTBcIiAvPlxuICAgICAgPENvbW1hbmRQcmltaXRpdmUuSW5wdXRcbiAgICAgICAgZGF0YS1zbG90PVwiY29tbWFuZC1pbnB1dFwiXG4gICAgICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICAgICAgXCJwbGFjZWhvbGRlcjp0ZXh0LW11dGVkLWZvcmVncm91bmQgZmxleCBoLTEwIHctZnVsbCByb3VuZGVkLW1kIGJnLXRyYW5zcGFyZW50IHB5LTMgdGV4dC1zbSBvdXRsaW5lLWhpZGRlbiBkaXNhYmxlZDpjdXJzb3Itbm90LWFsbG93ZWQgZGlzYWJsZWQ6b3BhY2l0eS01MFwiLFxuICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgKX1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZnVuY3Rpb24gQ29tbWFuZExpc3Qoe1xuICBjbGFzc05hbWUsXG4gIC4uLnByb3BzXG59OiBSZWFjdC5Db21wb25lbnRQcm9wczx0eXBlb2YgQ29tbWFuZFByaW1pdGl2ZS5MaXN0Pikge1xuICByZXR1cm4gKFxuICAgIDxDb21tYW5kUHJpbWl0aXZlLkxpc3RcbiAgICAgIGRhdGEtc2xvdD1cImNvbW1hbmQtbGlzdFwiXG4gICAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgICBcIm1heC1oLVszMDBweF0gc2Nyb2xsLXB5LTEgb3ZlcmZsb3cteC1oaWRkZW4gb3ZlcmZsb3cteS1hdXRvXCIsXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICl9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgLz5cbiAgKTtcbn1cblxuZnVuY3Rpb24gQ29tbWFuZEVtcHR5KHtcbiAgLi4ucHJvcHNcbn06IFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBDb21tYW5kUHJpbWl0aXZlLkVtcHR5Pikge1xuICByZXR1cm4gKFxuICAgIDxDb21tYW5kUHJpbWl0aXZlLkVtcHR5XG4gICAgICBkYXRhLXNsb3Q9XCJjb21tYW5kLWVtcHR5XCJcbiAgICAgIGNsYXNzTmFtZT1cInB5LTYgdGV4dC1jZW50ZXIgdGV4dC1zbVwiXG4gICAgICB7Li4ucHJvcHN9XG4gICAgLz5cbiAgKTtcbn1cblxuZnVuY3Rpb24gQ29tbWFuZEdyb3VwKHtcbiAgY2xhc3NOYW1lLFxuICAuLi5wcm9wc1xufTogUmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIENvbW1hbmRQcmltaXRpdmUuR3JvdXA+KSB7XG4gIHJldHVybiAoXG4gICAgPENvbW1hbmRQcmltaXRpdmUuR3JvdXBcbiAgICAgIGRhdGEtc2xvdD1cImNvbW1hbmQtZ3JvdXBcIlxuICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgXCJ0ZXh0LWZvcmVncm91bmQgWyZfW2NtZGstZ3JvdXAtaGVhZGluZ11dOnRleHQtbXV0ZWQtZm9yZWdyb3VuZCBvdmVyZmxvdy1oaWRkZW4gcC0xIFsmX1tjbWRrLWdyb3VwLWhlYWRpbmddXTpweC0yIFsmX1tjbWRrLWdyb3VwLWhlYWRpbmddXTpweS0xLjUgWyZfW2NtZGstZ3JvdXAtaGVhZGluZ11dOnRleHQteHMgWyZfW2NtZGstZ3JvdXAtaGVhZGluZ11dOmZvbnQtbWVkaXVtXCIsXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICl9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgLz5cbiAgKTtcbn1cblxuZnVuY3Rpb24gQ29tbWFuZFNlcGFyYXRvcih7XG4gIGNsYXNzTmFtZSxcbiAgLi4ucHJvcHNcbn06IFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBDb21tYW5kUHJpbWl0aXZlLlNlcGFyYXRvcj4pIHtcbiAgcmV0dXJuIChcbiAgICA8Q29tbWFuZFByaW1pdGl2ZS5TZXBhcmF0b3JcbiAgICAgIGRhdGEtc2xvdD1cImNvbW1hbmQtc2VwYXJhdG9yXCJcbiAgICAgIGNsYXNzTmFtZT17Y24oXCJiZy1ib3JkZXIgLW14LTEgaC1weFwiLCBjbGFzc05hbWUpfVxuICAgICAgey4uLnByb3BzfVxuICAgIC8+XG4gICk7XG59XG5cbmZ1bmN0aW9uIENvbW1hbmRJdGVtKHtcbiAgY2xhc3NOYW1lLFxuICAuLi5wcm9wc1xufTogUmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIENvbW1hbmRQcmltaXRpdmUuSXRlbT4pIHtcbiAgcmV0dXJuIChcbiAgICA8Q29tbWFuZFByaW1pdGl2ZS5JdGVtXG4gICAgICBkYXRhLXNsb3Q9XCJjb21tYW5kLWl0ZW1cIlxuICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgXCJkYXRhLVtzZWxlY3RlZD10cnVlXTpiZy1hY2NlbnQgZGF0YS1bc2VsZWN0ZWQ9dHJ1ZV06dGV4dC1hY2NlbnQtZm9yZWdyb3VuZCBbJl9zdmc6bm90KFtjbGFzcyo9J3RleHQtJ10pXTp0ZXh0LW11dGVkLWZvcmVncm91bmQgcmVsYXRpdmUgZmxleCBjdXJzb3ItZGVmYXVsdCBpdGVtcy1jZW50ZXIgZ2FwLTIgcm91bmRlZC1zbSBweC0yIHB5LTEuNSB0ZXh0LXNtIG91dGxpbmUtaGlkZGVuIHNlbGVjdC1ub25lIGRhdGEtW2Rpc2FibGVkPXRydWVdOnBvaW50ZXItZXZlbnRzLW5vbmUgZGF0YS1bZGlzYWJsZWQ9dHJ1ZV06b3BhY2l0eS01MCBbJl9zdmddOnBvaW50ZXItZXZlbnRzLW5vbmUgWyZfc3ZnXTpzaHJpbmstMCBbJl9zdmc6bm90KFtjbGFzcyo9J3NpemUtJ10pXTpzaXplLTRcIixcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgKX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICAvPlxuICApO1xufVxuXG5mdW5jdGlvbiBDb21tYW5kU2hvcnRjdXQoe1xuICBjbGFzc05hbWUsXG4gIC4uLnByb3BzXG59OiBSZWFjdC5Db21wb25lbnRQcm9wczxcInNwYW5cIj4pIHtcbiAgcmV0dXJuIChcbiAgICA8c3BhblxuICAgICAgZGF0YS1zbG90PVwiY29tbWFuZC1zaG9ydGN1dFwiXG4gICAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgICBcInRleHQtbXV0ZWQtZm9yZWdyb3VuZCBtbC1hdXRvIHRleHQteHMgdHJhY2tpbmctd2lkZXN0XCIsXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICl9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgLz5cbiAgKTtcbn1cblxuZXhwb3J0IHtcbiAgQ29tbWFuZCxcbiAgQ29tbWFuZERpYWxvZyxcbiAgQ29tbWFuZElucHV0LFxuICBDb21tYW5kTGlzdCxcbiAgQ29tbWFuZEVtcHR5LFxuICBDb21tYW5kR3JvdXAsXG4gIENvbW1hbmRJdGVtLFxuICBDb21tYW5kU2hvcnRjdXQsXG4gIENvbW1hbmRTZXBhcmF0b3IsXG59O1xuIl19