define(["require", "exports", "react/jsx-runtime", "lucide-react", "@/lib/utils", "@/components/ui/button"], function (require, exports, jsx_runtime_1, lucide_react_1, utils_1, button_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Pagination = Pagination;
    exports.PaginationContent = PaginationContent;
    exports.PaginationLink = PaginationLink;
    exports.PaginationItem = PaginationItem;
    exports.PaginationPrevious = PaginationPrevious;
    exports.PaginationNext = PaginationNext;
    exports.PaginationEllipsis = PaginationEllipsis;
    function Pagination({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)("nav", { role: "navigation", "aria-label": "pagination", "data-slot": "pagination", className: (0, utils_1.cn)("mx-auto flex w-full justify-center", className), ...props }));
    }
    function PaginationContent({ className, ...props }) {
        return ((0, jsx_runtime_1.jsx)("ul", { "data-slot": "pagination-content", className: (0, utils_1.cn)("flex flex-row items-center gap-1", className), ...props }));
    }
    function PaginationItem({ ...props }) {
        return (0, jsx_runtime_1.jsx)("li", { "data-slot": "pagination-item", ...props });
    }
    function PaginationLink({ className, isActive, size = "icon", ...props }) {
        return ((0, jsx_runtime_1.jsx)("a", { "aria-current": isActive ? "page" : undefined, "data-slot": "pagination-link", "data-active": isActive, className: (0, utils_1.cn)((0, button_1.buttonVariants)({
                variant: isActive ? "outline" : "ghost",
                size,
            }), className), ...props }));
    }
    function PaginationPrevious({ className, ...props }) {
        return ((0, jsx_runtime_1.jsxs)(PaginationLink, { "aria-label": "Go to previous page", size: "default", className: (0, utils_1.cn)("gap-1 px-2.5 sm:pl-2.5", className), ...props, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ChevronLeftIcon, {}), (0, jsx_runtime_1.jsx)("span", { className: "hidden sm:block", children: "Previous" })] }));
    }
    function PaginationNext({ className, ...props }) {
        return ((0, jsx_runtime_1.jsxs)(PaginationLink, { "aria-label": "Go to next page", size: "default", className: (0, utils_1.cn)("gap-1 px-2.5 sm:pr-2.5", className), ...props, children: [(0, jsx_runtime_1.jsx)("span", { className: "hidden sm:block", children: "Next" }), (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronRightIcon, {})] }));
    }
    function PaginationEllipsis({ className, ...props }) {
        return ((0, jsx_runtime_1.jsxs)("span", { "aria-hidden": true, "data-slot": "pagination-ellipsis", className: (0, utils_1.cn)("flex size-9 items-center justify-center", className), ...props, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.MoreHorizontalIcon, { className: "size-4" }), (0, jsx_runtime_1.jsx)("span", { className: "sr-only", children: "More pages" })] }));
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL3BhZ2luYXRpb24udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztJQXVIRSxnQ0FBVTtJQUNWLDhDQUFpQjtJQUNqQix3Q0FBYztJQUNkLHdDQUFjO0lBQ2QsZ0RBQWtCO0lBQ2xCLHdDQUFjO0lBQ2QsZ0RBQWtCO0lBbkhwQixTQUFTLFVBQVUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssRUFBK0I7UUFDdEUsT0FBTyxDQUNMLGdDQUNFLElBQUksRUFBQyxZQUFZLGdCQUNOLFlBQVksZUFDYixZQUFZLEVBQ3RCLFNBQVMsRUFBRSxJQUFBLFVBQUUsRUFBQyxvQ0FBb0MsRUFBRSxTQUFTLENBQUMsS0FDMUQsS0FBSyxHQUNULENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCxTQUFTLGlCQUFpQixDQUFDLEVBQ3pCLFNBQVMsRUFDVCxHQUFHLEtBQUssRUFDbUI7UUFDM0IsT0FBTyxDQUNMLDRDQUNZLG9CQUFvQixFQUM5QixTQUFTLEVBQUUsSUFBQSxVQUFFLEVBQUMsa0NBQWtDLEVBQUUsU0FBUyxDQUFDLEtBQ3hELEtBQUssR0FDVCxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsU0FBUyxjQUFjLENBQUMsRUFBRSxHQUFHLEtBQUssRUFBOEI7UUFDOUQsT0FBTyw0Q0FBYyxpQkFBaUIsS0FBSyxLQUFLLEdBQUksQ0FBQztJQUN2RCxDQUFDO0lBT0QsU0FBUyxjQUFjLENBQUMsRUFDdEIsU0FBUyxFQUNULFFBQVEsRUFDUixJQUFJLEdBQUcsTUFBTSxFQUNiLEdBQUcsS0FBSyxFQUNZO1FBQ3BCLE9BQU8sQ0FDTCw4Q0FDZ0IsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsZUFDakMsaUJBQWlCLGlCQUNkLFFBQVEsRUFDckIsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUNYLElBQUEsdUJBQWMsRUFBQztnQkFDYixPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU87Z0JBQ3ZDLElBQUk7YUFDTCxDQUFDLEVBQ0YsU0FBUyxDQUNWLEtBQ0csS0FBSyxHQUNULENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCxTQUFTLGtCQUFrQixDQUFDLEVBQzFCLFNBQVMsRUFDVCxHQUFHLEtBQUssRUFDb0M7UUFDNUMsT0FBTyxDQUNMLHdCQUFDLGNBQWMsa0JBQ0YscUJBQXFCLEVBQ2hDLElBQUksRUFBQyxTQUFTLEVBQ2QsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUFDLHdCQUF3QixFQUFFLFNBQVMsQ0FBQyxLQUM5QyxLQUFLLGFBRVQsdUJBQUMsOEJBQWUsS0FBRyxFQUNuQixpQ0FBTSxTQUFTLEVBQUMsaUJBQWlCLHlCQUFnQixJQUNsQyxDQUNsQixDQUFDO0lBQ0osQ0FBQztJQUVELFNBQVMsY0FBYyxDQUFDLEVBQ3RCLFNBQVMsRUFDVCxHQUFHLEtBQUssRUFDb0M7UUFDNUMsT0FBTyxDQUNMLHdCQUFDLGNBQWMsa0JBQ0YsaUJBQWlCLEVBQzVCLElBQUksRUFBQyxTQUFTLEVBQ2QsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUFDLHdCQUF3QixFQUFFLFNBQVMsQ0FBQyxLQUM5QyxLQUFLLGFBRVQsaUNBQU0sU0FBUyxFQUFDLGlCQUFpQixxQkFBWSxFQUM3Qyx1QkFBQywrQkFBZ0IsS0FBRyxJQUNMLENBQ2xCLENBQUM7SUFDSixDQUFDO0lBRUQsU0FBUyxrQkFBa0IsQ0FBQyxFQUMxQixTQUFTLEVBQ1QsR0FBRyxLQUFLLEVBQ3FCO1FBQzdCLE9BQU8sQ0FDTCxvRUFFWSxxQkFBcUIsRUFDL0IsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUFDLHlDQUF5QyxFQUFFLFNBQVMsQ0FBQyxLQUMvRCxLQUFLLGFBRVQsdUJBQUMsaUNBQWtCLElBQUMsU0FBUyxFQUFDLFFBQVEsR0FBRyxFQUN6QyxpQ0FBTSxTQUFTLEVBQUMsU0FBUywyQkFBa0IsSUFDdEMsQ0FDUixDQUFDO0lBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcbiAgQ2hldnJvbkxlZnRJY29uLFxuICBDaGV2cm9uUmlnaHRJY29uLFxuICBNb3JlSG9yaXpvbnRhbEljb24sXG59IGZyb20gXCJsdWNpZGUtcmVhY3RcIjtcblxuaW1wb3J0IHsgY24gfSBmcm9tIFwiQC9saWIvdXRpbHNcIjtcbmltcG9ydCB7IEJ1dHRvbiwgYnV0dG9uVmFyaWFudHMgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2J1dHRvblwiO1xuXG5mdW5jdGlvbiBQYWdpbmF0aW9uKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9OiBSZWFjdC5Db21wb25lbnRQcm9wczxcIm5hdlwiPikge1xuICByZXR1cm4gKFxuICAgIDxuYXZcbiAgICAgIHJvbGU9XCJuYXZpZ2F0aW9uXCJcbiAgICAgIGFyaWEtbGFiZWw9XCJwYWdpbmF0aW9uXCJcbiAgICAgIGRhdGEtc2xvdD1cInBhZ2luYXRpb25cIlxuICAgICAgY2xhc3NOYW1lPXtjbihcIm14LWF1dG8gZmxleCB3LWZ1bGwganVzdGlmeS1jZW50ZXJcIiwgY2xhc3NOYW1lKX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICAvPlxuICApO1xufVxuXG5mdW5jdGlvbiBQYWdpbmF0aW9uQ29udGVudCh7XG4gIGNsYXNzTmFtZSxcbiAgLi4ucHJvcHNcbn06IFJlYWN0LkNvbXBvbmVudFByb3BzPFwidWxcIj4pIHtcbiAgcmV0dXJuIChcbiAgICA8dWxcbiAgICAgIGRhdGEtc2xvdD1cInBhZ2luYXRpb24tY29udGVudFwiXG4gICAgICBjbGFzc05hbWU9e2NuKFwiZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXIgZ2FwLTFcIiwgY2xhc3NOYW1lKX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICAvPlxuICApO1xufVxuXG5mdW5jdGlvbiBQYWdpbmF0aW9uSXRlbSh7IC4uLnByb3BzIH06IFJlYWN0LkNvbXBvbmVudFByb3BzPFwibGlcIj4pIHtcbiAgcmV0dXJuIDxsaSBkYXRhLXNsb3Q9XCJwYWdpbmF0aW9uLWl0ZW1cIiB7Li4ucHJvcHN9IC8+O1xufVxuXG50eXBlIFBhZ2luYXRpb25MaW5rUHJvcHMgPSB7XG4gIGlzQWN0aXZlPzogYm9vbGVhbjtcbn0gJiBQaWNrPFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBCdXR0b24+LCBcInNpemVcIj4gJlxuICBSZWFjdC5Db21wb25lbnRQcm9wczxcImFcIj47XG5cbmZ1bmN0aW9uIFBhZ2luYXRpb25MaW5rKHtcbiAgY2xhc3NOYW1lLFxuICBpc0FjdGl2ZSxcbiAgc2l6ZSA9IFwiaWNvblwiLFxuICAuLi5wcm9wc1xufTogUGFnaW5hdGlvbkxpbmtQcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxhXG4gICAgICBhcmlhLWN1cnJlbnQ9e2lzQWN0aXZlID8gXCJwYWdlXCIgOiB1bmRlZmluZWR9XG4gICAgICBkYXRhLXNsb3Q9XCJwYWdpbmF0aW9uLWxpbmtcIlxuICAgICAgZGF0YS1hY3RpdmU9e2lzQWN0aXZlfVxuICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgYnV0dG9uVmFyaWFudHMoe1xuICAgICAgICAgIHZhcmlhbnQ6IGlzQWN0aXZlID8gXCJvdXRsaW5lXCIgOiBcImdob3N0XCIsXG4gICAgICAgICAgc2l6ZSxcbiAgICAgICAgfSksXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICl9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgLz5cbiAgKTtcbn1cblxuZnVuY3Rpb24gUGFnaW5hdGlvblByZXZpb3VzKHtcbiAgY2xhc3NOYW1lLFxuICAuLi5wcm9wc1xufTogUmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIFBhZ2luYXRpb25MaW5rPikge1xuICByZXR1cm4gKFxuICAgIDxQYWdpbmF0aW9uTGlua1xuICAgICAgYXJpYS1sYWJlbD1cIkdvIHRvIHByZXZpb3VzIHBhZ2VcIlxuICAgICAgc2l6ZT1cImRlZmF1bHRcIlxuICAgICAgY2xhc3NOYW1lPXtjbihcImdhcC0xIHB4LTIuNSBzbTpwbC0yLjVcIiwgY2xhc3NOYW1lKX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICA+XG4gICAgICA8Q2hldnJvbkxlZnRJY29uIC8+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJoaWRkZW4gc206YmxvY2tcIj5QcmV2aW91czwvc3Bhbj5cbiAgICA8L1BhZ2luYXRpb25MaW5rPlxuICApO1xufVxuXG5mdW5jdGlvbiBQYWdpbmF0aW9uTmV4dCh7XG4gIGNsYXNzTmFtZSxcbiAgLi4ucHJvcHNcbn06IFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBQYWdpbmF0aW9uTGluaz4pIHtcbiAgcmV0dXJuIChcbiAgICA8UGFnaW5hdGlvbkxpbmtcbiAgICAgIGFyaWEtbGFiZWw9XCJHbyB0byBuZXh0IHBhZ2VcIlxuICAgICAgc2l6ZT1cImRlZmF1bHRcIlxuICAgICAgY2xhc3NOYW1lPXtjbihcImdhcC0xIHB4LTIuNSBzbTpwci0yLjVcIiwgY2xhc3NOYW1lKX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICA+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJoaWRkZW4gc206YmxvY2tcIj5OZXh0PC9zcGFuPlxuICAgICAgPENoZXZyb25SaWdodEljb24gLz5cbiAgICA8L1BhZ2luYXRpb25MaW5rPlxuICApO1xufVxuXG5mdW5jdGlvbiBQYWdpbmF0aW9uRWxsaXBzaXMoe1xuICBjbGFzc05hbWUsXG4gIC4uLnByb3BzXG59OiBSZWFjdC5Db21wb25lbnRQcm9wczxcInNwYW5cIj4pIHtcbiAgcmV0dXJuIChcbiAgICA8c3BhblxuICAgICAgYXJpYS1oaWRkZW5cbiAgICAgIGRhdGEtc2xvdD1cInBhZ2luYXRpb24tZWxsaXBzaXNcIlxuICAgICAgY2xhc3NOYW1lPXtjbihcImZsZXggc2l6ZS05IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiLCBjbGFzc05hbWUpfVxuICAgICAgey4uLnByb3BzfVxuICAgID5cbiAgICAgIDxNb3JlSG9yaXpvbnRhbEljb24gY2xhc3NOYW1lPVwic2l6ZS00XCIgLz5cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInNyLW9ubHlcIj5Nb3JlIHBhZ2VzPC9zcGFuPlxuICAgIDwvc3Bhbj5cbiAgKTtcbn1cblxuZXhwb3J0IHtcbiAgUGFnaW5hdGlvbixcbiAgUGFnaW5hdGlvbkNvbnRlbnQsXG4gIFBhZ2luYXRpb25MaW5rLFxuICBQYWdpbmF0aW9uSXRlbSxcbiAgUGFnaW5hdGlvblByZXZpb3VzLFxuICBQYWdpbmF0aW9uTmV4dCxcbiAgUGFnaW5hdGlvbkVsbGlwc2lzLFxufTtcbiJdfQ==