define(["require", "exports", "react/jsx-runtime", "react", "@/components/ui/label", "@/components/ui/slider"], function (require, exports, jsx_runtime_1, React, label_1, slider_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SliderDemo = SliderDemo;
    function SliderDemo() {
        return ((0, jsx_runtime_1.jsxs)("div", { className: "flex w-full max-w-sm flex-col flex-wrap gap-6 md:flex-row", children: [(0, jsx_runtime_1.jsx)(slider_1.Slider, { defaultValue: [50], max: 100, step: 1 }), (0, jsx_runtime_1.jsx)(slider_1.Slider, { defaultValue: [25, 50], max: 100, step: 1 }), (0, jsx_runtime_1.jsx)(slider_1.Slider, { defaultValue: [10, 20], max: 100, step: 10 }), (0, jsx_runtime_1.jsxs)("div", { className: "flex w-full items-center gap-6", children: [(0, jsx_runtime_1.jsx)(slider_1.Slider, { defaultValue: [50], max: 100, step: 1, orientation: "vertical" }), (0, jsx_runtime_1.jsx)(slider_1.Slider, { defaultValue: [25], max: 100, step: 1, orientation: "vertical" })] }), (0, jsx_runtime_1.jsx)(SliderControlled, {})] }));
    }
    function SliderControlled() {
        const [value, setValue] = React.useState([0.3, 0.7]);
        return ((0, jsx_runtime_1.jsxs)("div", { className: "grid w-full gap-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between gap-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "slider-demo-temperature", children: "Temperature" }), (0, jsx_runtime_1.jsx)("span", { className: "text-muted-foreground text-sm", children: value.join(", ") })] }), (0, jsx_runtime_1.jsx)(slider_1.Slider, { id: "slider-demo-temperature", value: value, onValueChange: setValue, min: 0, max: 1, step: 0.1 })] }));
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWRlbW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9kZW1vLXY0L3NsaWRlci1kZW1vLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0lBQUEsWUFBWSxDQUFDOzs7SUFPYixnQ0FhQztJQWJELFNBQWdCLFVBQVU7UUFDeEIsT0FBTyxDQUNMLGlDQUFLLFNBQVMsRUFBQywyREFBMkQsYUFDeEUsdUJBQUMsZUFBTSxJQUFDLFlBQVksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsR0FBSSxFQUNqRCx1QkFBQyxlQUFNLElBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsR0FBSSxFQUNyRCx1QkFBQyxlQUFNLElBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBSSxFQUN0RCxpQ0FBSyxTQUFTLEVBQUMsZ0NBQWdDLGFBQzdDLHVCQUFDLGVBQU0sSUFBQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFDLFVBQVUsR0FBRyxFQUN4RSx1QkFBQyxlQUFNLElBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBQyxVQUFVLEdBQUcsSUFDcEUsRUFDTix1QkFBQyxnQkFBZ0IsS0FBRyxJQUNoQixDQUNQLENBQUM7SUFDSixDQUFDO0lBRUQsU0FBUyxnQkFBZ0I7UUFDdkIsTUFBTSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFckQsT0FBTyxDQUNMLGlDQUFLLFNBQVMsRUFBQyxtQkFBbUIsYUFDaEMsaUNBQUssU0FBUyxFQUFDLHlDQUF5QyxhQUN0RCx1QkFBQyxhQUFLLElBQUMsT0FBTyxFQUFDLHlCQUF5Qiw0QkFBb0IsRUFDNUQsaUNBQU0sU0FBUyxFQUFDLCtCQUErQixZQUM1QyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUNaLElBQ0gsRUFDTix1QkFBQyxlQUFNLElBQ0wsRUFBRSxFQUFDLHlCQUF5QixFQUM1QixLQUFLLEVBQUUsS0FBSyxFQUNaLGFBQWEsRUFBRSxRQUFRLEVBQ3ZCLEdBQUcsRUFBRSxDQUFDLEVBQ04sR0FBRyxFQUFFLENBQUMsRUFDTixJQUFJLEVBQUUsR0FBRyxHQUNULElBQ0UsQ0FDUCxDQUFDO0lBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgTGFiZWwgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2xhYmVsXCI7XG5pbXBvcnQgeyBTbGlkZXIgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3NsaWRlclwiO1xuXG5leHBvcnQgZnVuY3Rpb24gU2xpZGVyRGVtbygpIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggdy1mdWxsIG1heC13LXNtIGZsZXgtY29sIGZsZXgtd3JhcCBnYXAtNiBtZDpmbGV4LXJvd1wiPlxuICAgICAgPFNsaWRlciBkZWZhdWx0VmFsdWU9e1s1MF19IG1heD17MTAwfSBzdGVwPXsxfSAvPlxuICAgICAgPFNsaWRlciBkZWZhdWx0VmFsdWU9e1syNSwgNTBdfSBtYXg9ezEwMH0gc3RlcD17MX0gLz5cbiAgICAgIDxTbGlkZXIgZGVmYXVsdFZhbHVlPXtbMTAsIDIwXX0gbWF4PXsxMDB9IHN0ZXA9ezEwfSAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IHctZnVsbCBpdGVtcy1jZW50ZXIgZ2FwLTZcIj5cbiAgICAgICAgPFNsaWRlciBkZWZhdWx0VmFsdWU9e1s1MF19IG1heD17MTAwfSBzdGVwPXsxfSBvcmllbnRhdGlvbj1cInZlcnRpY2FsXCIgLz5cbiAgICAgICAgPFNsaWRlciBkZWZhdWx0VmFsdWU9e1syNV19IG1heD17MTAwfSBzdGVwPXsxfSBvcmllbnRhdGlvbj1cInZlcnRpY2FsXCIgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPFNsaWRlckNvbnRyb2xsZWQgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZnVuY3Rpb24gU2xpZGVyQ29udHJvbGxlZCgpIHtcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZShbMC4zLCAwLjddKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCB3LWZ1bGwgZ2FwLTNcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIGdhcC0yXCI+XG4gICAgICAgIDxMYWJlbCBodG1sRm9yPVwic2xpZGVyLWRlbW8tdGVtcGVyYXR1cmVcIj5UZW1wZXJhdHVyZTwvTGFiZWw+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtbXV0ZWQtZm9yZWdyb3VuZCB0ZXh0LXNtXCI+XG4gICAgICAgICAge3ZhbHVlLmpvaW4oXCIsIFwiKX1cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgICA8U2xpZGVyXG4gICAgICAgIGlkPVwic2xpZGVyLWRlbW8tdGVtcGVyYXR1cmVcIlxuICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgIG9uVmFsdWVDaGFuZ2U9e3NldFZhbHVlfVxuICAgICAgICBtaW49ezB9XG4gICAgICAgIG1heD17MX1cbiAgICAgICAgc3RlcD17MC4xfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdfQ==