define(["require", "exports", "react/jsx-runtime", "react", "lucide-react", "@/lib/utils", "@/components/ui/avatar", "@/components/ui/button", "@/components/ui/command", "@/components/ui/popover"], function (require, exports, jsx_runtime_1, React, lucide_react_1, utils_1, avatar_1, button_1, command_1, popover_1) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ComboboxDemo = ComboboxDemo;
    const frameworks = [
        {
            value: "next.js",
            label: "Next.js",
        },
        {
            value: "sveltekit",
            label: "SvelteKit",
        },
        {
            value: "nuxt.js",
            label: "Nuxt.js",
        },
        {
            value: "remix",
            label: "Remix",
        },
        {
            value: "astro",
            label: "Astro",
        },
    ];
    const users = [
        {
            id: "1",
            username: "shadcn",
        },
        {
            id: "2",
            username: "leerob",
        },
        {
            id: "3",
            username: "evilrabbit",
        },
    ];
    const timezones = [
        {
            label: "Americas",
            timezones: [
                { value: "America/New_York", label: "(GMT-5) New York" },
                { value: "America/Los_Angeles", label: "(GMT-8) Los Angeles" },
                { value: "America/Chicago", label: "(GMT-6) Chicago" },
                { value: "America/Toronto", label: "(GMT-5) Toronto" },
                { value: "America/Vancouver", label: "(GMT-8) Vancouver" },
                { value: "America/Sao_Paulo", label: "(GMT-3) SÃ£o Paulo" },
            ],
        },
        {
            label: "Europe",
            timezones: [
                { value: "Europe/London", label: "(GMT+0) London" },
                { value: "Europe/Paris", label: "(GMT+1) Paris" },
                { value: "Europe/Berlin", label: "(GMT+1) Berlin" },
                { value: "Europe/Rome", label: "(GMT+1) Rome" },
                { value: "Europe/Madrid", label: "(GMT+1) Madrid" },
                { value: "Europe/Amsterdam", label: "(GMT+1) Amsterdam" },
            ],
        },
        {
            label: "Asia/Pacific",
            timezones: [
                { value: "Asia/Tokyo", label: "(GMT+9) Tokyo" },
                { value: "Asia/Shanghai", label: "(GMT+8) Shanghai" },
                { value: "Asia/Singapore", label: "(GMT+8) Singapore" },
                { value: "Asia/Dubai", label: "(GMT+4) Dubai" },
                { value: "Australia/Sydney", label: "(GMT+11) Sydney" },
                { value: "Asia/Seoul", label: "(GMT+9) Seoul" },
            ],
        },
    ];
    function ComboboxDemo() {
        return ((0, jsx_runtime_1.jsxs)("div", { className: "flex w-full flex-col items-start gap-4 md:flex-row", children: [(0, jsx_runtime_1.jsx)(FrameworkCombobox, { frameworks: [...frameworks] }), (0, jsx_runtime_1.jsx)(UserCombobox, { users: [...users], selectedUserId: users[0].id }), (0, jsx_runtime_1.jsx)(TimezoneCombobox, { timezones: [...timezones], selectedTimezone: timezones[0].timezones[0] })] }));
    }
    function FrameworkCombobox({ frameworks }) {
        var _a;
        const [open, setOpen] = React.useState(false);
        const [value, setValue] = React.useState("");
        return ((0, jsx_runtime_1.jsxs)(popover_1.Popover, { open: open, onOpenChange: setOpen, children: [(0, jsx_runtime_1.jsx)(popover_1.PopoverTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", role: "combobox", "aria-expanded": open, className: "w-full justify-between md:max-w-[200px]", children: [value
                                ? (_a = frameworks.find((framework) => framework.value === value)) === null || _a === void 0 ? void 0 : _a.label
                                : "Select framework...", (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronsUpDown, { className: "text-muted-foreground" })] }) }), (0, jsx_runtime_1.jsx)(popover_1.PopoverContent, { className: "w-(--radix-popover-trigger-width) p-0", children: (0, jsx_runtime_1.jsxs)(command_1.Command, { children: [(0, jsx_runtime_1.jsx)(command_1.CommandInput, { placeholder: "Search framework..." }), (0, jsx_runtime_1.jsxs)(command_1.CommandList, { children: [(0, jsx_runtime_1.jsx)(command_1.CommandEmpty, { children: "No framework found." }), (0, jsx_runtime_1.jsx)(command_1.CommandGroup, { children: frameworks.map((framework) => ((0, jsx_runtime_1.jsxs)(command_1.CommandItem, { value: framework.value, onSelect: (currentValue) => {
                                                setValue(currentValue === value ? "" : currentValue);
                                                setOpen(false);
                                            }, children: [framework.label, (0, jsx_runtime_1.jsx)(lucide_react_1.CheckIcon, { className: (0, utils_1.cn)("ml-auto", value === framework.value ? "opacity-100" : "opacity-0") })] }, framework.value))) })] })] }) })] }));
    }
    function UserCombobox({ users, selectedUserId, }) {
        const [open, setOpen] = React.useState(false);
        const [value, setValue] = React.useState(selectedUserId);
        const selectedUser = React.useMemo(() => users.find((user) => user.id === value), [value, users]);
        return ((0, jsx_runtime_1.jsxs)(popover_1.Popover, { open: open, onOpenChange: setOpen, children: [(0, jsx_runtime_1.jsx)(popover_1.PopoverTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", role: "combobox", "aria-expanded": open, className: "w-full justify-between px-2 md:max-w-[200px]", children: [selectedUser ? ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsxs)(avatar_1.Avatar, { className: "size-5", children: [(0, jsx_runtime_1.jsx)(avatar_1.AvatarImage, { src: `https://github.com/${selectedUser.username}.png` }), (0, jsx_runtime_1.jsx)(avatar_1.AvatarFallback, { children: selectedUser.username[0] })] }), selectedUser.username] })) : ("Select user..."), (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronsUpDown, { className: "text-muted-foreground" })] }) }), (0, jsx_runtime_1.jsx)(popover_1.PopoverContent, { className: "w-(--radix-popover-trigger-width) p-0", children: (0, jsx_runtime_1.jsxs)(command_1.Command, { children: [(0, jsx_runtime_1.jsx)(command_1.CommandInput, { placeholder: "Search user..." }), (0, jsx_runtime_1.jsxs)(command_1.CommandList, { children: [(0, jsx_runtime_1.jsx)(command_1.CommandEmpty, { children: "No user found." }), (0, jsx_runtime_1.jsx)(command_1.CommandGroup, { children: users.map((user) => ((0, jsx_runtime_1.jsxs)(command_1.CommandItem, { value: user.id, onSelect: (currentValue) => {
                                                setValue(currentValue === value ? "" : currentValue);
                                                setOpen(false);
                                            }, children: [(0, jsx_runtime_1.jsxs)(avatar_1.Avatar, { className: "size-5", children: [(0, jsx_runtime_1.jsx)(avatar_1.AvatarImage, { src: `https://github.com/${user.username}.png` }), (0, jsx_runtime_1.jsx)(avatar_1.AvatarFallback, { children: user.username[0] })] }), user.username, (0, jsx_runtime_1.jsx)(lucide_react_1.CheckIcon, { className: (0, utils_1.cn)("ml-auto", value === user.id ? "opacity-100" : "opacity-0") })] }, user.id))) }), (0, jsx_runtime_1.jsx)(command_1.CommandSeparator, {}), (0, jsx_runtime_1.jsx)(command_1.CommandGroup, { children: (0, jsx_runtime_1.jsxs)(command_1.CommandItem, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.PlusCircleIcon, {}), "Create user"] }) })] })] }) })] }));
    }
    function TimezoneCombobox({ timezones, selectedTimezone, }) {
        const [open, setOpen] = React.useState(false);
        const [value, setValue] = React.useState(selectedTimezone.value);
        const selectedGroup = React.useMemo(() => timezones.find((group) => group.timezones.find((tz) => tz.value === value)), [value, timezones]);
        const selectedTimezoneLabel = React.useMemo(() => { var _a; return (_a = selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.timezones.find((tz) => tz.value === value)) === null || _a === void 0 ? void 0 : _a.label; }, [value, selectedGroup]);
        return ((0, jsx_runtime_1.jsxs)(popover_1.Popover, { open: open, onOpenChange: setOpen, children: [(0, jsx_runtime_1.jsx)(popover_1.PopoverTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", className: "h-12 w-full justify-between px-2.5 md:max-w-[200px]", children: [selectedTimezone ? ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col items-start gap-0.5", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-muted-foreground text-xs font-normal", children: selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.label }), (0, jsx_runtime_1.jsx)("span", { children: selectedTimezoneLabel })] })) : ("Select timezone"), (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDownIcon, { className: "text-muted-foreground" })] }) }), (0, jsx_runtime_1.jsx)(popover_1.PopoverContent, { className: "p-0", align: "start", children: (0, jsx_runtime_1.jsxs)(command_1.Command, { children: [(0, jsx_runtime_1.jsx)(command_1.CommandInput, { placeholder: "Search timezone..." }), (0, jsx_runtime_1.jsxs)(command_1.CommandList, { className: "scroll-pb-12", children: [(0, jsx_runtime_1.jsx)(command_1.CommandEmpty, { children: "No timezone found." }), timezones.map((region) => ((0, jsx_runtime_1.jsx)(command_1.CommandGroup, { heading: region.label, children: region.timezones.map((timezone) => ((0, jsx_runtime_1.jsxs)(command_1.CommandItem, { value: timezone.value, onSelect: (currentValue) => {
                                                setValue(currentValue);
                                                setOpen(false);
                                            }, children: [timezone.label, (0, jsx_runtime_1.jsx)(lucide_react_1.CheckIcon, { className: "ml-auto opacity-0 data-[selected=true]:opacity-100", "data-selected": value === timezone.value })] }, timezone.value))) }, region.label))), (0, jsx_runtime_1.jsx)(command_1.CommandSeparator, { className: "sticky bottom-10" }), (0, jsx_runtime_1.jsx)(command_1.CommandGroup, { className: "bg-popover sticky bottom-0", children: (0, jsx_runtime_1.jsxs)(command_1.CommandItem, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.PlusCircleIcon, {}), "Create timezone"] }) })] })] }) })] }));
    }
});
//# sourceMappingURL=data:application/json;base64,